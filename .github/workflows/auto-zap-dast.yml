name: AUTO-CI-ZAP-DAST-ANALYSIS

on:
  push:
    branches:
      - main
      - development
      - preproduction

jobs:
  zap_scan:
    name: OWASP ZAP API Scan
    runs-on: ubuntu-latest

    steps:
      - name: Checkout Repository
        uses: actions/checkout@v4

      - name: Set up Docker
        run: docker --version  # Verifica que Docker esté instalado en el runner

      - name: Build and Run API Container
        run: |
          echo "Construyendo la imagen de la API..."
          docker build -t securemail:v1.0.0 .

          echo "Creando red Docker..."
          docker network create zap-network  # Crea la red para permitir comunicación entre contenedores

          echo "Iniciando contenedor de la API..."
          docker run -d --network zap-network --name securemail_container \
            -e HYBRID_ANALYSIS_API_KEY="${{ secrets.HYBRID_ANALYSIS_API_KEY }}" \
            -e HYBRID_ANALYSIS_API_URL="${{ secrets.HYBRID_ANALYSIS_API_URL }}" \
            -e ML_MODEL_NAME_URI="${{ secrets.ML_MODEL_NAME_URI }}" \
            -p 10000:10000 securemail:v1.0.0  # Expones el puerto 10000 para que ZAP lo pueda escanear

          echo "⌛ Esperando 60 segundos para que la API esté lista..."
          sleep 60  # Es importante asegurar que la API esté completamente levantada antes de escanear

          docker ps  # Verifica que el contenedor está corriendo

      - name: Run ZAP API Scan
        uses: zaproxy/action-api-scan@v0.9.0
        with:
          target: "http://securemail_container:10000"  # Apunta al contenedor de la API dentro de la misma red Docker
          fail_action: false 
          format: "json"
          output_file: "zap_report.json"  # Guardar el reporte en formato JSON

      - name: Upload ZAP Report
        uses: actions/upload-artifact@v4
        with:
          name: zap-report
          path: zap_report.json  # Sube el reporte generado a GitHub Actions

      - name: Stop and Remove Containers
        if: always()  # Este paso se ejecuta incluso si falla el anterior
        run: |
          echo "Deteniendo contenedores..."
          docker stop securemail_container  # Detiene el contenedor
          docker rm securemail_container  # Elimina el contenedor
          docker network rm zap-network  # Elimina la red Docker creada para la comunicación
