name: Auto-CI-PYTEST-PYLINT

on:
  push:
    branches:
      - development
      - main

permissions:
  contents: read

jobs:
  build:
    runs-on: windows-latest 

    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Set up Python 3.11
      uses: actions/setup-python@v3
      with:
        python-version: "3.11"

    - name: Install dependencies
      run: |
        pip install pylint pytest httpx libmagic
        if (Test-Path requirements.txt) { pip install -r requirements.txt }

    - name: Run pylint on app.py
      run: |
        pylint app.py | Out-File -FilePath pylint_report.txt -Force
        Get-Content pylint_report.txt | Out-String | Write-Host

    - name: Show pylint results in job summary
      if: always()
      run: |
        echo "## 📝 Pylint Report (app.py)" >> $GITHUB_STEP_SUMMARY
        echo '```' >> $GITHUB_STEP_SUMMARY
        Get-Content pylint_report.txt | Out-String | Write-Host >> $GITHUB_STEP_SUMMARY
        echo '```' >> $GITHUB_STEP_SUMMARY

    - name: Run pytest with environment variables
      env:
        ML_MODEL_NAME_URI: ${{ secrets.ML_MODEL_NAME_URI }}
        HYBRID_ANALYSIS_API_KEY: ${{ secrets.HYBRID_ANALYSIS_API_KEY }}
        HYBRID_ANALYSIS_API_URL: ${{ secrets.HYBRID_ANALYSIS_API_URL }}
      run: |
        pytest test/*.py --disable-warnings | Out-File -FilePath pytest_report.txt -Force
        # Para ver los resultados de pytest directamente en el flujo de trabajo
        Get-Content pytest_report.txt | Out-String | Write-Host

    - name: Show pytest results in job summary
      if: always()
      run: |
        echo "## 📝 Pytest Execution Report" >> $GITHUB_STEP_SUMMARY
        echo '```' >> $GITHUB_STEP_SUMMARY
        Get-Content pytest_report.txt | Out-String | Write-Host >> $GITHUB_STEP_SUMMARY
        echo '```' >> $GITHUB_STEP_SUMMARY
